# -*- coding: utf-8 -*-
"""P2: Ejercicios Colas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bIkl3uuetO_BuFrXEDI1PGPDVHvNAuAj

#Guía de ejercicios sobre Colas

Esta guía se tiene que resolver creando un archivo de python en la carpeta del repositorio que tiene de la materia. Cada vez que resuelva un ejercicio haga un commit. Pruebe la solución antes de commitear con algunos tests y déjelos en el código para poder ejecutarlos.

1. Leer el material de la página: 
https://runestone.academy/runestone/static/pythoned/BasicDS/QueEsUnaCola.html
https://runestone.academy/runestone/static/pythoned/BasicDS/ImplementacionDeUnaColaEnPython.html

2. Hacer la autoevaluación que está en esa página.
"""

#Ejercicicio 3: Implementar en un archivo de python la clase cola vista en clase
class Cola:
    """La cola es una coleccion de datos lineales, FIFO (First in First out)"""
    def __init__(self):
      self.elementos = []
      
    def agregar(self, item):
        self.elementos.append(item)

    def es_vacia(self)->bool: 
        return self.elementos == []

    def primero(self): # fijarse que no este vacia
        if not self.es_vacia():
            return self.elementos[0]

    def tamanio(self):
        return len(self.elementos)

    def sacar(self):
        if not self.es_vacia():
            return self.elementos.pop(0)
    def __str__(self):
        return ("{}".format(self.elementos))

p = Cola() # crea una cola (vacia)
print(p.es_vacia()) #True
p.agregar(4) # 
p.agregar('perro')
print(p.elementos) # [4,'perro']
print(p.primero()) # 4
p.agregar(True) # [4,'perro',true]
print(p.tamanio()) # 3
print(p.es_vacia()) #False
p.agregar(8.4) # [4,'perro',true,8.4]
print(p.sacar()) # imprime el 4 y lo saca
print(p.sacar()) # impreme perro y lo saca
print(p.tamanio()) # 2

# Ejercicio 4: 
# Agregar a la clase cola los siguientes métodos (usando preferentemente los métodos ya utilizados)
#    1. Imprimir cola
def imprimirCola(self):
        print (self.cola)
#    2. Vaciar la cola.
def vaciarCola(self):
        while self.tamanio() > 0:
            self.avanzar()
#    3. Dar vuelta cola
def darVueltaCola(self):
        aux = []
        while self.tamanio() > 0:
            aux.append(self.avanzar())
        while len(aux) > 0:
            self.agregar(aux.pop())

# Ejercicio 5:
# Escriba una función que reciba una Cola C1 y mueva sus elementos a una nueva Cola c2, manteniendo el orden de salida de los elementos. Al finalizar la Cola C1 no debe contener elementos.

def trasladar(c:cola)->cola:

c2 = trasladar(c1)
assert c1.es_vacia == True

# Ejercicio 6
""" Escriba un metodo de Cola que dada una cola C1 reciba una cola C2  de 
números enteros y devuelva una nueva Cola con los elementos concatenados en el 
orden C1 y C2. Es de destacar que las Colas recibidas no deben sufrir ningún 
tipo de cambio o alteración.(en principio utilizar los métodos de cola para la 
tarea)"""
def concatenarColas(cola1, cola2):
    nuevaCola = Cola()
    aux = []
    while cola1.tamanio() > 0:
        aux.append(cola1.avanzar())
        nuevaCola.agregar(aux[len(aux)-1])
    while len(aux) > 0:
        cola1.agregar(aux.pop())
    cola1.darVueltaCola()
    while cola2.tamanio() > 0:
        aux.append(cola2.avanzar())
        nuevaCola.agregar(aux[len(aux)-1])
    while len(aux) > 0:
        cola2.agregar(aux.pop())
    cola2.darVueltaCola()
    return nuevaCola.cola

# Ejercicio 7
"""Escriba una rutina que reciba dos Colas C1 y C2 de números enteros y 
proceda a intercambiar sus elementos, manteniendo el orden de salida de los mismos.
 Al finalizar la rutina, la Cola C1 tendrá los elementos de la 
Cola C2 y ésta a su vez tendrá los elementos de la Cola C1."""

def intercambiarColas(cola1,cola2):
    aTransferirDe1 = cola1.tamanio()
    aTransferirDe2 = cola2.tamanio()
    for i in range (aTransferirDe2):
        cola1.agregar(cola2.avanzar())
    for i in range (aTransferirDe1):
        cola2.agregar(cola1.avanzar())

"""## Ejercicio 8
De una lista de ejemplos de problemas donde puede usarse una cola como sistema de administración de la información y como podría pensarse un programa pensando estas ideas.
"""

def Playlist(musica):
    canciones = Cola()
    for i in musica:
        canciones.add(i)
    while sillas.tamanio() > 0:
        stop = canciones.play()
        for i in range (randint(0,10)):
            canciones.add(stop)
            stop = sillas.play()
    return stop
    
Playlist(["Song1","Song2","Song3","Song4"])